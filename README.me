# NFT-based Subscription Service with Time-lock Functionality

## Overview

This project implements a decentralized, NFT-based subscription service using Clarity smart contracts on the Stacks blockchain. It allows content creators and service providers to offer subscription-based access to their products, with automatic time-locking functionality.

## Features

- **NFT-based Subscriptions**: Each subscription is represented by a unique Non-Fungible Token (NFT).
- **Time-lock Functionality**: Subscriptions automatically unlock and lock based on their validity period.
- **Service Management**: Create, update, and manage different subscription services.
- **User Balance System**: Users can deposit and withdraw funds to manage their subscriptions.
- **Auto-renewal**: Optional auto-renewal feature for subscriptions.
- **Subscription Management**: Users can purchase, renew, pause, and resume subscriptions.
- **Transferable Subscriptions**: Users can transfer their subscription NFTs to others.

## Smart Contract Functions

### Initialization and Management

- `initialize()`: Initialize the contract (owner only).
- `add-service-provider(provider)`: Add a new service provider (owner only).
- `remove-service-provider(provider)`: Remove a service provider (owner only).

### Service Management

- `create-service(name, description, price, duration)`: Create a new subscription service.
- `update-service(service-id, name, description, price, duration)`: Update an existing service.

### Subscription Operations

- `purchase-subscription(service-id, auto-renew)`: Purchase a new subscription.
- `renew-subscription(subscription-id)`: Manually renew a subscription.
- `cancel-auto-renew(subscription-id)`: Cancel auto-renewal for a subscription.
- `transfer-subscription(subscription-id, recipient)`: Transfer a subscription to another user.
- `pause-subscription(subscription-id)`: Pause an active subscription.
- `resume-subscription(subscription-id)`: Resume a paused subscription.

### User Balance Management

- `deposit-funds(amount)`: Deposit funds to user's balance.
- `withdraw-funds(amount)`: Withdraw funds from user's balance.

### Read-only Functions

- `check-subscription(user, service-id)`: Check if a user has an active subscription.
- `get-subscription-details(subscription-id)`: Get details of a specific subscription.
- `get-service-details(service-id)`: Get details of a specific service.
- `get-user-balance(user)`: Get the balance of a user.
- `get-user-subscriptions(user)`: Get all subscriptions for a user.
- `get-provider-services(provider)`: Get all services offered by a provider.

### Automated Operations

- `process-auto-renewals()`: Process automatic renewals for eligible subscriptions.

## Error Handling

The contract includes various error codes to handle different scenarios:

- `ERR_NOT_AUTHORIZED (u100)`: User not authorized for the operation.
- `ERR_ALREADY_INITIALIZED (u101)`: Contract already initialized.
- `ERR_NOT_FOUND (u102)`: Requested item not found.
- `ERR_INVALID_SUBSCRIPTION (u103)`: Invalid subscription details.
- `ERR_SUBSCRIPTION_EXPIRED (u104)`: Subscription has expired.
- `ERR_INSUFFICIENT_BALANCE (u105)`: User has insufficient balance.
- `ERR_INVALID_AMOUNT (u106)`: Invalid amount specified.
- `ERR_SUBSCRIPTION_ACTIVE (u107)`: Subscription is already active.

## Usage

1. Deploy the smart contract to the Stacks blockchain.
2. Initialize the contract using the `initialize()` function.
3. Add service providers using `add-service-provider(provider)`.
4. Service providers can create services using `create-service(...)`.
5. Users can deposit funds using `deposit-funds(amount)`.
6. Users can purchase subscriptions using `purchase-subscription(...)`.
7. Users can manage their subscriptions (renew, cancel auto-renew, pause, resume, transfer).
8. The `process-auto-renewals()` function should be called periodically to handle automatic renewals.

## Security Considerations

- Only the contract owner can initialize the contract and manage service providers.
- Service providers are verified before allowing service creation or updates.
- User balances are managed within the contract to ensure secure transactions.
- Subscription transfers require ownership verification.
- Time-locking is handled automatically based on block height.

## Future Enhancements

- Implement a royalty system for service providers.
- Add support for tiered subscription levels.
- Integrate with external oracle services for dynamic pricing.
- Implement a governance system for community-driven decision-making.


## Contributing

Contributions to improve this NFT-based Subscription Services with Time-lock Functionality are welcome. Please submit pull requests with detailed descriptions of change and ensure all tests pass.

## Author

Chiedozie Obidile